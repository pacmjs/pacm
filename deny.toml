# cargo-deny configuration
# See https://embarkstudios.github.io/cargo-deny/

[graph]
# TODO: Set these after determining final dependency graph
# targets = []
# exclude = []

[output]
feature-depth = 1

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for security vulnerabilities
vulnerability = "deny"
# The lint level for unmaintained crates
unmaintained = "warn"
# The lint level for crates that have been yanked from their source registry
yanked = "warn"
# The lint level for crates with security notices. Note that as of
# 2019-12-17 there are no security notice advisories in
# https://github.com/rustsec/advisory-db
notice = "warn"
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    # TODO: Review and remove any advisories that should not be ignored
    #"RUSTSEC-0000-0000",
]

[licenses]
# TODO: Review and adjust license requirements based on project needs
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
]
# List of explicitly disallowed licenses
deny = [
    "GPL-2.0",
    "GPL-3.0",
    "AGPL-1.0",
    "AGPL-3.0",
]
# Lint level for when multiple versions of the same license are detected
copyleft = "warn"
# Confidence threshold for detecting a license from a license text.
# Expressed as a floating point number in (0.0, 1.0] range, with
# 1.0 meaning perfect confidence
confidence-threshold = 0.8
# Allow 1 or more licenses on a per-crate basis, so that particular licenses
# aren't accepted for every possible crate as with the normal allow list
exceptions = [
    # TODO: Add any crate-specific license exceptions if needed
    # { allow = ["Zlib"], name = "adler32" },
]

[[licenses.clarify]]
# TODO: Add license clarifications if needed for specific crates
# name = "ring"
# expression = "MIT AND ISC AND OpenSSL"
# license-files = [
#     { path = "LICENSE", hash = 0xbd0eed23 }
# ]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
highlight = "all"
# List of crates that are allowed. Use with care!
allow = [
    # TODO: Review and add any crates that should be explicitly allowed
]
# List of crates to deny
deny = [
    # TODO: Add any crates that should be explicitly denied
    # { name = "openssl", version = "*" },
]
# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    # TODO: Add any crates that should be skipped for duplicate detection
    # { name = "winapi", version = "=0.2.8" },
]
# Similarly to `skip` allows you to skip certain crates from being checked. Unlike
# `skip`, it also includes the entire tree of transitive dependencies starting at
# the specified crate, up to a certain depth, which allows you to skip those as well.
skip-tree = [
    # TODO: Add any crate trees that should be skipped
    # { name = "windows-sys", version = "=0.45.0", depth = 20 },
]

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"
# List of URLs for allowed crate registries. Defaults to the crates.io index
# if not specified. If it is specified but empty, no registries are allowed.
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of URLs for allowed Git repositories
allow-git = [
    # TODO: Add any allowed git repositories
]
